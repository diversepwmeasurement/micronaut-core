jobs:
  github_release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
    - release
    - provenance
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - continue-on-error: true
      name: Download artifacts
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e
      with:
        name: gradle-build-outputs
        path: build/repo
    - continue-on-error: true
      name: Create artifacts archive
      run: "find build/repo -type f \\( \\( -iname \"*.jar\" -not -iname \"*-javadoc.jar\"\
        \ -not \\\n    -iname \"*-sources.jar\" \\) -or -iname \"*.pom\" \\) | xargs\
        \ zip artifacts.zip\n"
      shell: bash
    - continue-on-error: true
      name: Upload assets
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
      with:
        files: artifacts.zip
  provenance:
    needs:
    - release
    - provenance-subject
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.provenance-subject.outputs.artifacts-sha256 }}
      compile-generator: true
      upload-assets: true
  provenance-subject:
    needs:
    - release
    outputs:
      artifacts-sha256: ${{ steps.set-hash.outputs.artifacts-sha256 }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download artifacts-sha256
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e
      with:
        name: artifacts-sha256
    - continue-on-error: true
      id: set-hash
      name: Set artifacts-sha256 as output
      run: echo "artifacts-sha256=$(cat artifacts-sha256)" >> "$GITHUB_OUTPUT"
      shell: bash
  release:
    outputs:
      artifacts-sha256: ${{ steps.hash.outputs.artifacts-sha256 }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
    - continue-on-error: true
      uses: gradle/wrapper-validation-action@v3
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      id: release_version
      name: Set the current release version
      run: echo "release_version=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
    - continue-on-error: true
      env:
        MICRONAUT_BUILD_EMAIL: ${{ secrets.MICRONAUT_BUILD_EMAIL }}
      name: Run pre-release
      uses: micronaut-projects/github-actions/pre-release@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      env:
        GPG_FILE: ${{ secrets.GPG_FILE }}
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD
          }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME
          }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      id: publish
      name: Publish to Sonatype OSSRH
      run: 'echo $GPG_FILE | base64 -d > secring.gpg

        # Publish both locally and to Sonatype.

        # The artifacts stored locally will be used to generate the SLSA provenance.

        ./gradlew publishAllPublicationsToBuildRepository publishToSonatype closeAndReleaseSonatypeStagingRepository

        # Read the current version from gradle.properties.

        VERSION=$(./gradlew properties | grep ''version:'' | awk ''{print $2}'')

        # Read the project group from gradle.properties.

        GROUP_PATH=$(./gradlew properties| grep "projectGroup" | awk ''{print $2}''
        | sed ''s/\./\//g'')

        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

        echo "group=$GROUP_PATH" >> "$GITHUB_OUTPUT"

        '
    - continue-on-error: true
      id: hash
      name: Generate subject
      run: "# Find the artifact JAR and POM files in the local repository.\nARTIFACTS=$(find\
        \ build/repo/${{ steps.publish.outputs.group }}/*/${{ steps.publish.outputs.version\
        \ }}/* \\\n    -type f \\( \\( -iname \"*.jar\" -not -iname \"*-javadoc.jar\"\
        \ -not -iname \"*-sources.jar\" \\) -or -iname \"*.pom\" \\))\n# Compute the\
        \ hashes for the artifacts.\n# Set the hash as job output for debugging.\n\
        echo \"artifacts-sha256=$(sha256sum $ARTIFACTS | base64 -w0)\" >> \"$GITHUB_OUTPUT\"\
        \n# Store the hash in a file, which is uploaded as a workflow artifact.\n\
        sha256sum $ARTIFACTS | base64 -w0 > artifacts-sha256\n"
    - continue-on-error: true
      name: Upload build artifacts
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
      with:
        name: gradle-build-outputs
        path: build/repo/${{ steps.publish.outputs.group }}/*/${{ steps.publish.outputs.version
          }}/*
        retention-days: 5
    - continue-on-error: true
      name: Upload artifacts-sha256
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
      with:
        name: artifacts-sha256
        path: artifacts-sha256
        retention-days: 5
    - continue-on-error: true
      env:
        GH_TOKEN_PUBLIC_REPOS_READONLY: ${{ secrets.GH_TOKEN_PUBLIC_REPOS_READONLY
          }}
        GH_USERNAME: ${{ secrets.GH_USERNAME }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD
          }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME
          }}
      name: Generate docs
      run: ./gradlew docs
    - continue-on-error: true
      name: Export Gradle Properties
      uses: micronaut-projects/github-actions/export-gradle-properties@master
    - continue-on-error: true
      env:
        BETA: ${{ !(github.event.release.target_commitish == github.event.repository.default_branch)
          || contains(steps.release_version.outputs.release_version, 'M') || contains(steps.release_version.outputs.release_version,
          'RC') }}
        BRANCH: gh-pages
        FOLDER: build/docs
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD
          }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME
          }}
        TARGET_REPOSITORY: ${{ github.repository == 'micronaut-projects/micronaut-core'
          && env.docsRepository || github.repository }}
        VERSION: ${{ steps.release_version.outputs.release_version }}
      if: success()
      name: Publish to Github Pages
      uses: micronaut-projects/github-pages-deploy-action@master
    - continue-on-error: true
      env:
        MICRONAUT_BUILD_EMAIL: ${{ secrets.MICRONAUT_BUILD_EMAIL }}
      if: success()
      name: Run post-release
      uses: micronaut-projects/github-actions/post-release@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
name: Release
on:
  repository_dispatch:
    types: trigger-ga___release.yml
